---
title: "Last_version_R_Markdown"
author: "Vasil Zhelyazkov"
date: '2022-03-22'
output: html_document
---
<br>
<br>
Hi, dear viewer! If you made it here I assume you are intersted in taking a look at my analysis using  R. On this document you can follow the process step-by-step. Enjoy!
<br>
<br>
<style type="text/css">
  body{
  font-size: 14pt;
}
</style>
```{r message=FALSE, warning=FALSE, include=FALSE}
install.packages('plyr', repos = "http://cran.us.r-project.org")
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(plyr)
library(dplyr)
install.packages("rmarkdown")
library(rmarkdown)
install.packages("vitae")
library(vitae)
install.packages("tidyverse")
library(tidyverse)
install.packages("lubridate")
library(lubridate)
install.packages("ggplot2")
library(ggplot2)
```
```{r message=FALSE, warning=FALSE, include=FALSE}
setwd("/Users/User/Desktop/Google Data Analytics/Course 8") #sets your working directory to simplify calls to data
getwd() #displays your working directory
```
<br>
STEP 1: COLLECT DATA
<br>
<br>
<br>
Here I Uploaded the Divvy datasets
<br>
```{r message=FALSE, warning=FALSE, results="hide"}
q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv")
q3_2019 <- read_csv("Divvy_Trips_2019_Q3.csv")
q4_2019 <- read_csv("Divvy_Trips_2019_Q4.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")
```
<br>
<br>
STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE
<br>
<br>
<br>
I Compared column names in each of the files because, altough they don't have to be in the same order, they need to match perfectly before I can use a command to join them into one file
<br>
```{r echo=TRUE, message=FALSE, warning=FALSE}
colnames(q3_2019)
colnames(q4_2019)
colnames(q2_2019)
colnames(q1_2020)
```
<br>
To make the columns consistent with q1_2020, as this will be the supposed going-forward table design for Divvy, I renamed them
<br>
```{r message=FALSE, warning=FALSE, results="hide"}
(q4_2019 <- rename(q4_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype))
(q3_2019 <- rename(q3_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype))
(q2_2019 <- rename(q2_2019
                   ,ride_id = "01 - Rental Details Rental ID"
                   ,rideable_type = "01 - Rental Details Bike ID" 
                   ,started_at = "01 - Rental Details Local Start Time"  
                   ,ended_at = "01 - Rental Details Local End Time"  
                   ,start_station_name = "03 - Rental Start Station Name" 
                   ,start_station_id = "03 - Rental Start Station ID"
                   ,end_station_name = "02 - Rental End Station Name" 
                   ,end_station_id = "02 - Rental End Station ID"
                   ,member_casual = "User Type"))
```
<br>
Once again I inspected the dataframes and looked for discrepancies
<br>
```{r results="hide", message=FALSE, warning=FALSE}
str(q1_2020)
str(q4_2019)
str(q3_2019)
str(q2_2019)
```
<br>
I had to convert ride_id and rideable_type to character so that they can stack correctly
<br>
```{r message=FALSE, warning=FALSE, results="hide"}
q4_2019 <-  mutate(q4_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
q3_2019 <-  mutate(q3_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
q2_2019 <-  mutate(q2_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
```
<br>
Then I stacked individual quarter's data frames into one big data frame
<br>
```{r message=FALSE, warning=FALSE, results="hide"}
all_trips <- bind_rows(q2_2019, q3_2019, q4_2019, q1_2020)
```
<br>
Finally I removed lat, long, birthyear, and gender fields as this data has been dropped beginning of 2020
<br>
```{r message=FALSE, warning=FALSE, results="hide"}
all_trips <- all_trips %>%  
  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, "01 - Rental Details Duration In Seconds Uncapped", "05 - Member Details Member Birthday Year", "Member Gender", "tripduration"))
```
<br>
<br>
STEP 3: CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS
<br>
<br>
<br>
For start, I inspected the new table that has been created
<br>
```{r eval=FALSE, message=FALSE, warning=FALSE, results="hide"}
colnames(all_trips)  #List of column names
nrow(all_trips)  #How many rows are in data frame
dim(all_trips)  #Dimensions of the data frame
head(all_trips)  #See the first 6 rows of data frame
str(all_trips)  #See list of columns and data types 
summary(all_trips)  #Statistical summary of data
```
<br>
After the inspection I concluded that there are a few problems we will need to fix:
<br>
<br>
(1) In the "member_casual" column there are two names for members ("member" and "Subscriber") and two names for casual riders ("Customer" and "casual"). To make the dataframe consistent with their current nomenclatureIn the "member_casual" column I decided to replace "Subscriber" with "member" and "Customer" with "casual".
<br>
Began by seeing how many observations fall under each usertype
<br>
```{r eval=FALSE, message=FALSE, warning=FALSE, results="hide"}
table(all_trips$member_casual)
```
<br>
Then I reassigned to the desired values
<br>
```{r message=FALSE, warning=FALSE, results="hide"}
all_trips <-  all_trips %>% 
  mutate(member_casual = recode(member_casual
                           ,"Subscriber" = "member"
                           ,"Customer" = "casual"))
```
<br>
Checked to make sure the proper number of observations were reassigned
<br>
```{r echo=TRUE, message=FALSE, warning=FALSE}
table(all_trips$member_casual)
```
<br>
(2) The data can only be aggregated at the ride-level, which is too granular. That's why it's good to add some additional columns of data, such as day, month, year, that provide additional opportunities to aggregate the data.
<br>
```{r echo=TRUE, message=FALSE, warning=FALSE}
all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")
```
<br>
(3) I wanted to add a calculated field for length of ride since the 2020 Q1 data did not have the "tripduration" column. Therefore I added "ride_length" to the entire dataframe for consistency.
<br>
```{r message=FALSE, warning=FALSE, results="hide"}
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)
```
<br>
Inspected the structure of the columns
<br>
```{r eval=FALSE, message=FALSE, warning=FALSE, include=FALSE}
str(all_trips)
```
<br>
Converted "ride_length" from Factor to numeric so I can run calculations on the data
<br>
```{r message=FALSE, warning=FALSE, results="hide"}
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)
```
<br>
(4) There are some rides where tripduration shows up as negative, including several hundred rides where Divvy took bikes out of circulation for Quality Control reasons
<br>
I wanted to create a new version of the dataframe (v2) since "bad" data was being removed
<br>
```{r message=FALSE, warning=FALSE, results="hide"}
all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]
```
<br>
<br>
STEP 4: CONDUCT DESCRIPTIVE ANALYSIS
<br>
<br>
<br>
Descriptive analysis on ride_length (all figures in seconds)
<br>
```{r echo=TRUE, message=FALSE, warning=FALSE}
mean(all_trips_v2$ride_length) #straight average (total ride length / rides)
median(all_trips_v2$ride_length) #midpoint number in the ascending array of ride lengths
max(all_trips_v2$ride_length) #longest ride
min(all_trips_v2$ride_length) #shortest ride
```
<br>
Wanted to compare members and casual users
<br>
```{r echo=TRUE, message=FALSE, warning=FALSE}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)
```
<br>
Ran this to see the average ride time by each day for members vs casual users
<br>
```{r eval=FALSE, message=FALSE, warning=FALSE, include=FALSE}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
```
<br>
Noticed that the days of the week are out of order and attempted to fix it
<br>
```{r message=FALSE, warning=FALSE, results="hide"}
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
```
<br>
This time it should be fine
<br>
```{r echo=TRUE, message=FALSE, warning=FALSE}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
```
<br>
Wrote a code to analyze ridership data by type and weekday
<br>
```{r message=FALSE, warning=FALSE, results="hide"}
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(member_casual, weekday) %>%  #groups by usertype and weekday
  summarise(number_of_rides = n()							#calculates the number of rides and average duration 
  ,average_duration = mean(ride_length)) %>% 		# calculates the average duration
  arrange(member_casual, weekday)								# sorts
```
<br>
To make it more clear I made a visualization of the number of rides by rider type
<br>
```{r echo=TRUE, message=FALSE, warning=FALSE}
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")
```
<br>
<br>
And this one is for average duration
<br>
```{r echo=TRUE, message=FALSE, warning=FALSE}
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")
```
<br>
<br>
STEP 5: EXPORT SUMMARY FILE FOR FURTHER ANALYSIS
<br>
```{r message=FALSE, warning=FALSE, include=FALSE}
Summary_cyclistic_analysis <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
write.csv(Summary_cyclistic_analysis, "Summary_cyclistic_analysis.csv")
```
<br>
That was it. Hope you enjoyed it!
<br>
<br>
<br>
